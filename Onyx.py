# -*- coding: utf-8 -*-
"""ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m8k6WaQ0mNGFx9d3WkEcCeLki3-6db6h
"""

from google.colab import drive
drive.mount('/content/gdrive')

import os
import warnings

# Tools

import pandas as pd  # data processing, CSV file I/O (e.g. pd.read_csv)
import numpy as np  # linear algebra
from itertools import cycle
import matplotlib.pyplot as plt
from sklearn import decomposition, datasets

# Models
from sklearn import svm, linear_model
from xgboost import XGBRegressor, plot_importance
from sklearn.linear_model import LinearRegression, TheilSenRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from xgboost import XGBRegressor, XGBClassifier
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.svm import SVR, SVC




# Utilities
from sklearn.model_selection import train_test_split
import joblib
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

from sklearn.metrics import accuracy_score, precision_score

#zero_band_gap_rows = data[data['band_gaps'] <= 1]
#data_without_zero = data[data['band_gaps'] >= 1]

#zero_band_gap_rows.to_csv('/content/gdrive/MyDrive/Descriptor/data/interaction_data_zero.csv', index=False)

#data_without_zero.to_csv('/content/gdrive/MyDrive/Descriptor/data/interaction_data_re.csv', index=False)

"""# Load and preprocess the data"""

# data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/lattice_data2.csv')

# data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/lattice_data2.csv')
# data.head()

# data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/lattice_data2.csv')
# data.head()

df = pd.read_csv("/content/sample_data/california_housing_test.csv")
df.head()

y = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/E_above_hull/e_above_hull.csv')

y.head(1)

y1 = y.drop('formula', axis=1)

datax = data.drop('band_gaps', axis=1)

datax['Energy'] = y1['Energy_above_hull']

datax.head()

no_oxy_data = data_without_oxygen
oxy_data = data_with_oxygen
li_data = data_with_li
p_data = data_with_p
mn_data = data_with_mn
new_data = data_without_specific_elements

# Save the filtered data to separate CSV files
data_with_oxygen.to_csv("/content/gdrive/MyDrive/Descriptor/data/crystals_with_oxygen.csv", index=False)
data_with_li.to_csv("/content/gdrive/MyDrive/Descriptor/data/band_gaps/crystals_with_li.csv", index=False)
data_with_mn.to_csv("/content/gdrive/MyDrive/Descriptor/data/band_gaps/crystals_with_mn.csv", index=False)
data_with_p.to_csv("/content/gdrive/MyDrive/Descriptor/data/band_gaps/crystals_with_p.csv", index=False)
data_without_specific_elements.to_csv("/content/gdrive/MyDrive/Descriptor/data/band_gaps/crystals_without_specific_elements.csv", index=False)
data_without_oxygen.to_csv("/content/gdrive/MyDrive/Descriptor/data/band_gaps/crystals_without_oxygen.csv", index=False)

oxy_data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/formationE/symmetry G/crystals_with_oxygen.csv')

no_oxy_data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/formationE/symmetry G/crystals_without_oxygen.csv')

li_data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/formationE/symmetry G/crystals_with_li.csv')

mn_data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/formationE/symmetry G/crystals_with_mn.csv')

p_data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/formationE/symmetry G/crystals_with_p.csv')

new_data = pd.read_csv('/content/gdrive/MyDrive/Descriptor/data/formationE/symmetry G/crystals_without_specific_elements.csv')

#data = data_without_zero

set_data = [data,oxy_data,no_oxy_data,li_data,mn_data,p_data,new_data]
for d in set_data:
  for c in d.columns:
    if 'Unnamed' in c:
      print(c)
      del d[c]
      print(d.head(1))

oxy_y = oxy_data.pop('Energy')
no_oxy_y = no_oxy_data.pop('Energy')
li_y = li_data.pop('Energy')
mn_y = mn_data.pop('Energy')
p_y = p_data.pop('Energy')
new_y = new_data.pop('Energy')

formula, formula2,formula3,formula4,formula5,formula6,formula7,formula8 = data.pop('formula'),y.pop('formula'),oxy_data.pop('formula'),no_oxy_data.pop('formula'),li_data.pop('formula'),mn_data.pop('formula'),p_data.pop('formula'),new_data.pop('formula')

set_y =[oxy_y,no_oxy_y,li_y,mn_y,p_y,new_y,y]

for d in set_y:
  d = d.fillna(0, inplace=True)

x = data.drop('band_gaps', axis=1)
oxy_x = oxy_data
no_oxy_x = no_oxy_data
li_x = li_data
mn_x = mn_data
p_x = p_data
new_x = new_data

set_x = [x,oxy_x,no_oxy_x,li_x,mn_x,p_x,new_x]
for xs in set_x:
  xs.fillna(value=0, inplace=True)

set_x = [x,oxy_x,no_oxy_x,li_x,mn_x,p_x,new_x]
for xs in set_x:
  print(xs.head())

scaler = StandardScaler().fit(x)
set_x = [x,oxy_x,no_oxy_x,li_x,mn_x,p_x,new_x]
for xs in set_x:
  xs = scaler.transform(xs)

X_train_scaled, X_test_scaled, y_train, y_test = train_test_split(
    x, y, test_size=.2, random_state=100)

X_train_scaled=pd.DataFrame(X_train_scaled)
X_test_scaled=pd.DataFrame(X_test_scaled)
y_train=pd.DataFrame(y_train)
y_test=pd.DataFrame(y_test)

set_x = [oxy_x,no_oxy_x,li_x,mn_x,p_x,new_x]
for xs in set_x:
  xs = pd.DataFrame(xs)

set_y =[oxy_y,no_oxy_y,li_y,mn_y,p_y,new_y]
for ys in set_y:
  ys = pd.DataFrame(ys)

y_train.head()

y_train = y_train.pop('Energy_above_hull')
y_test = y_test.pop('Energy_above_hull')

"""X_train_scaled.to_csv("/content/gdrive/MyDrive/Descriptor/data_frame/X_train_scaled.csv")
X_test_scaled.to_csv("/content/gdrive/MyDrive/Descriptor/data_frame/X_test_scaled.csv")
y_train.to_csv("/content/gdrive/MyDrive/Descriptor/data_frame/y_train.csv")
y_test.to_csv("/content/gdrive/MyDrive/Descriptor/data_frame/y_test.csv")

, 'SVR'
   SVR(kernel='rbf', epsilon=0.1),
"""

regr_names = ['XGBoostR', 'RFR']
regr_objects = [
    XGBRegressor(objective='reg:linear', colsample_bytree=0.3, learning_rate=0.1,
                  max_depth=400, alpha=10, n_estimators=400),
    RandomForestRegressor(n_estimators=400, max_depth=400, random_state=0),
]

ele = ['O']

for regr_choice in ele: #range(2):
    #regr = regr_objects[regr_choice]
    #regr_name = regr_names[regr_choice]
    regr = RandomForestRegressor(n_estimators=400, max_depth=400, random_state=0)
    regr_name = 'RFR'
    regr.fit(X_train_scaled, y_train)

   #1 Training
    y_predicted = regr.predict(X_train_scaled)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/train_'+regr_name+'.txt', 'w')
    errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(y_train, y_predicted)))+'\n')
    errors_file.write('r2\t'+str(r2_score(y_train, y_predicted))+'\n')
    errors_file.close()

    xPlot = y_train
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ko')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_train', bbox_inches='tight')



    #2 Test
    y_predicted = regr.predict(X_test_scaled)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/test_'+regr_name+'.txt', 'w')
    errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(y_test, y_predicted)))+'\n')
    errors_file.write('r2\t'+str(r2_score(y_test, y_predicted))+'\n')
    errors_file.close()

    xPlot = y_test
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ko')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_test', bbox_inches='tight')


    #3 Oxygen
    y_predicted = regr.predict(oxy_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/oxygen_'+regr_name+'.txt', 'w')
    errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(oxy_y, y_predicted)))+'\n')
    errors_file.write('r2\t'+str(r2_score(oxy_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = oxy_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ro')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_oxygen', bbox_inches='tight')


    #4 No_Oxygen
    y_predicted = regr.predict(no_oxy_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/no_oxygen_'+regr_name+'.txt', 'w')
    errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(no_oxy_y, y_predicted)))+'\n')
    errors_file.write('r2\t'+str(r2_score(no_oxy_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = no_oxy_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'go')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_no_oxygen', bbox_inches='tight')



    #5 Lithium
    y_predicted = regr.predict(li_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/Lithium_'+regr_name+'.txt', 'w')
    errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(li_y, y_predicted)))+'\n')
    errors_file.write('r2\t'+str(r2_score(li_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = li_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'bo')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_Lithium', bbox_inches='tight')


    #6 Manganese
    y_predicted = regr.predict(mn_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/Manganese_'+regr_name+'.txt', 'w')
    errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(mn_y, y_predicted)))+'\n')
    errors_file.write('r2\t'+str(r2_score(mn_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = mn_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'yo')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_Manganese', bbox_inches='tight')



    #7 Phosphorus
    y_predicted = regr.predict(p_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/Phosphorus_'+regr_name+'.txt', 'w')
    errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(p_y, y_predicted)))+'\n')
    errors_file.write('r2\t'+str(r2_score(p_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = p_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'mo')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_Phosphorus', bbox_inches='tight')


    #8 Without specific elements
    y_predicted = regr.predict(new_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/New_Data_'+regr_name+'.txt', 'w')
    errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(new_y, y_predicted)))+'\n')
    errors_file.write('r2\t'+str(r2_score(new_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = new_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'co')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_New_Data', bbox_inches='tight')

y_predicted = regr.predict(new_x)

errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/no_specific_elements_'+regr_name+'.txt', 'w')
errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(new_y, y_predicted)))+'\n')
errors_file.write('r2\t'+str(r2_score(new_y, y_predicted))+'\n')
errors_file.close()

xPlot = new_y
yPlot = y_predicted
plt.figure(figsize=(10, 10))
plt.plot(xPlot, yPlot, 'ro')
plt.plot(xPlot, xPlot)
plt.ylabel(regr_name)
plt.xlabel('DFT')
plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_no_specific_elements', bbox_inches='tight')



y_predicted = regr.predict(no_oxy_x)

errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/no_oxygen_'+regr_name+'.txt', 'w')
errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(no_oxy_y, y_predicted)))+'\n')
errors_file.write('r2\t'+str(r2_score(no_oxy_y, y_predicted))+'\n')
errors_file.close()

xPlot = no_oxy_y
yPlot = y_predicted
plt.figure(figsize=(10, 10))
plt.plot(xPlot, yPlot, 'ro')
plt.plot(xPlot, xPlot)
plt.ylabel(regr_name)
plt.xlabel('DFT')
plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_no_oxygen', bbox_inches='tight')

print(len(y_predicted))
print(len(y_train))

threshold = 1.5
y_train = (y_train > threshold).astype(int)
y_test = (y_test > threshold).astype(int)
oxy_y = (oxy_y > threshold).astype(int)
no_oxy_y = (no_oxy_y > threshold).astype(int)
li_y = (li_y > threshold).astype(int)
mn_y = (mn_y > threshold).astype(int)
p_y = (p_y > threshold).astype(int)
new_y = (new_y > threshold).astype(int)

"""'SVC'
,
    SVC(kernel='rbf', gamma='auto'),
"""

regr_names2 = ['XGBoostC', 'RFC']
regr_objects2 = [
    XGBClassifier(objective='binary:logistic', colsample_bytree=0.3, learning_rate=0.1,
                   max_depth=400, alpha=10, n_estimators=400),
    RandomForestClassifier(n_estimators=400, max_depth=400, random_state=0)]

for regr_choice in range(2):
    regr = regr_objects2[regr_choice]
    regr_name = regr_names2[regr_choice]
    regr.fit(X_train_scaled, y_train)

   #1 afasdfasfdasfdasfdasfd
    y_predicted = regr.predict(X_train_scaled)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/train_'+regr_name+'.txt', 'w')
    errors_file.write(
        'accuracy\t'+str(accuracy_score(y_train, y_predicted))+'\n')
    errors_file.write('precision\t'+str(precision_score(y_train, y_predicted))+'\n')
    errors_file.close()

    xPlot = y_train
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ro')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_train', bbox_inches='tight')



    #2 ajfdskaskjfdakjshfdkjaskfdaksfdlk
    y_predicted = regr.predict(X_test_scaled)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/test_'+regr_name+'.txt', 'w')
    errors_file.write(
        'accuracy\t'+str(accuracy_score(y_test, y_predicted))+'\n')
    errors_file.write('precision\t'+str(precision_score(y_test, y_predicted))+'\n')
    errors_file.close()

    xPlot = y_test
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ro')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_test', bbox_inches='tight')


    #3 ajkfdhsfdkjsakjhfdkajshkfdjhaksjfdla
    y_predicted = regr.predict(oxy_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/oxygen_'+regr_name+'.txt', 'w')
    errors_file.write(
        'accuracy\t'+str(accuracy_score(oxy_y, y_predicted))+'\n')
    errors_file.write('precision\t'+str(precision_score(oxy_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = oxy_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ro')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_oxygen', bbox_inches='tight')


    #4 ajfkakjsfljaskfdjhaksjhfdkasdf
    y_predicted = regr.predict(no_oxy_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/no_oxygen_'+regr_name+'.txt', 'w')
    errors_file.write(
        'accuracy\t'+str(accuracy_score(no_oxy_y, y_predicted))+'\n')
    errors_file.write('precision\t'+str(precision_score(no_oxy_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = no_oxy_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ro')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_no_oxygen', bbox_inches='tight')



    #4 afdskjalsjfdlkajsldfkjlajdsflk;asd
    y_predicted = regr.predict(li_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/Lithium_'+regr_name+'.txt', 'w')
    errors_file.write(
        'accuracy\t'+str(accuracy_score(li_y, y_predicted))+'\n')
    errors_file.write('precision\t'+str(precision_score(li_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = li_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ro')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_Lithium', bbox_inches='tight')


    #5BAUFADSFAISFIUAHSDFHAKSDKASDKJF
    y_predicted = regr.predict(mn_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/Manganese_'+regr_name+'.txt', 'w')
    errors_file.write(
        'accuracy\t'+str(accuracy_score(mn_y, y_predicted))+'\n')
    errors_file.write('precision\t'+str(precision_score(mn_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = mn_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ro')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_Manganese', bbox_inches='tight')


    y_predicted = regr.predict(p_x)

    errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/Phosphorus_'+regr_name+'.txt', 'w')
    errors_file.write(
        'accuracy\t'+str(accuracy_score(p_y, y_predicted))+'\n')
    errors_file.write('precision\t'+str(precision_score(p_y, y_predicted))+'\n')
    errors_file.close()

    xPlot = p_y
    yPlot = y_predicted
    plt.figure(figsize=(10, 10))
    plt.plot(xPlot, yPlot, 'ro')
    plt.plot(xPlot, xPlot)
    plt.ylabel(regr_name)
    plt.xlabel('DFT')
    plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'_Phosphorus', bbox_inches='tight')

y_predicted = regr.predict(no_oxy_x)
print(accuracy_score(no_oxy_y,y_predicted))

y_predicted = regr.predict(X_train_scaled)
print(accuracy_score(y_train, y_predicted))
print(precision_score(y_train, y_predicted))

xPlot = y_train
yPlot = y_predicted
plt.figure(figsize=(10, 10))
plt.plot(xPlot, yPlot, 'ro')
plt.plot(xPlot, xPlot)
plt.ylabel(regr_name)
plt.xlabel('DFT')

print(str(np.sqrt(mean_squared_error(y_train, y_predicted))))

regr_name = 'SVM'
regr =  svm.SVR(kernel='rbf', epsilon=0.1, verbose=True)
regr.fit(X_train_scaled, y_train)

y_predicted = regr.predict(X_test_scaled)

print(mean_squared_error(y_test, y_predicted))
print(r2_score(y_test, y_predicted))

errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'Test_Analysis.txt', 'w')
errors_file.write('RMSE\t'+str(np.sqrt(mean_squared_error(y_test, y_predicted)))+'\n')
errors_file.write('r2\t'+str(r2_score(y_test, y_predicted))+'\n')
errors_file.close()

xPlot = y_test
yPlot = y_predicted
plt.figure(figsize=(10, 10))
plt.plot(xPlot, yPlot, 'ro')
plt.plot(xPlot, xPlot)
plt.ylabel(regr_name)
plt.xlabel('DFT')
plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'Correlation_Test', bbox_inches='tight')

y_predicted = regr.predict(X_train_scaled)

print(mean_squared_error(y_train, y_predicted))
print(r2_score(y_train, y_predicted))

errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'Train_Analysis.txt', 'w')
errors_file.write('RMSE\t'+str(np.sqrt(mean_squared_error(y_train, y_predicted)))+'\n')
errors_file.write('r2\t'+str(r2_score(y_train, y_predicted))+'\n')
errors_file.close()

xPlot = y_train
yPlot = y_predicted
plt.figure(figsize=(10, 10))
plt.plot(xPlot, yPlot, 'ro')
plt.plot(xPlot, xPlot)
plt.ylabel(regr_name)
plt.xlabel('DFT')
plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+regr_name+'Correlation_Train', bbox_inches='tight')

"""# **Testing to see which discriptor gives the best correlation**"""

i = 1
X_train_scaled = X_train_scaled[i].values.reshape(-1,1)
X_test_scaled = X_test_scaled[i].values.reshape(-1,1)
model = RandomForestRegressor(n_estimators=2, max_depth=100, random_state=0)

model.fit(X_train_scaled, y_train)

y_predicted = model.predict(X_test_scaled)

print(mean_squared_error(y_test, y_predicted))
print(r2_score(y_test, y_predicted))

errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/'+nu+'Test_Analysis.txt', 'w')
errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(y_test, y_predicted)))+'\n')
errors_file.write('r2\t'+str(r2_score(y_test, y_predicted))+'\n')
errors_file.close()

xPlot = y_test
yPlot = y_predicted
plt.figure(figsize=(10, 10))
plt.plot(xPlot, yPlot, 'ro')
plt.plot(xPlot, xPlot)
plt.ylabel('descriptor '+nu+'coloumn')
plt.xlabel('DFT')
plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+nu+'Correlation_Test', bbox_inches='tight')

y_predicted = model.predict(X_train_scaled)

print(mean_squared_error(y_train, y_predicted))
print(r2_score(y_train, y_predicted))

errors_file = open('/content/gdrive/MyDrive/Descriptor/data/models/'+nu+'Train_Analysis.txt', 'w')
errors_file.write(
        'RMSE\t'+str(np.sqrt(mean_squared_error(y_train, y_predicted)))+'\n')
errors_file.write('r2\t'+str(r2_score(y_train, y_predicted))+'\n')
errors_file.close()

xPlot = y_train
yPlot = y_predicted
plt.figure(figsize=(10, 10))
plt.plot(xPlot, yPlot, 'ro')
plt.plot(xPlot, xPlot)
plt.ylabel('descriptor '+nu+'coloumn')
plt.xlabel('DFT')
plt.savefig('/content/gdrive/MyDrive/Descriptor/data/models/'+nu+'Correlation_Train', bbox_inches='tight')

import pandas as pd

# Define the elements to filter
elements_to_filter = ['O', 'Li', 'Mn', 'P']

# Filter the data to include only crystals containing specified elements
data_with_oxygen = datax[datax["formula"].apply(lambda formula: 'O' in formula)]
data_with_li = datax[datax["formula"].apply(lambda formula: 'Li' in formula)]
data_with_mn = datax[datax["formula"].apply(lambda formula: 'Mn' in formula)]
data_with_p = datax[datax["formula"].apply(lambda formula: 'P' in formula)]

# Filter the data to remove crystals containing specified elements
data_without_oxygen = datax[~datax["formula"].apply(lambda formula: 'O' in formula)]
data_without_specific_elements = data_without_oxygen[~data_without_oxygen["formula"].apply(lambda formula: any(element in formula for element in elements_to_filter))]